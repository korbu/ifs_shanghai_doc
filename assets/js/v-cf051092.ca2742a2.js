"use strict";(self.webpackChunkifs_shanghai_doc=self.webpackChunkifs_shanghai_doc||[]).push([[327],{7815:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-cf051092",path:"/zh/eb_xelor/user_guide/eb_adg.html",title:"EB corbos AdaptiveCore",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Building the ADG",slug:"building-the-adg",children:[]},{level:2,title:"Description of binary files",slug:"description-of-binary-files",children:[]},{level:2,title:"Building the ADG",slug:"building-the-adg-1",children:[]},{level:2,title:"ADG containers",slug:"adg-containers",children:[]}],filePathRelative:"zh/eb_xelor/user_guide/eb_adg.md",git:{updatedTime:1632316233e3,contributors:[{name:"Qian Chen",email:"KimChan2013@users.noreply.github.com",commits:1}]}}},838:(e,n,a)=>{a.r(n),a.d(n,{default:()=>y});var s=a(6252);const i=(0,s._)("h1",{id:"eb-corbos-adaptivecore",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#eb-corbos-adaptivecore","aria-hidden":"true"},"#"),(0,s.Uk)(" EB corbos AdaptiveCore")],-1),r=(0,s._)("p",null,"The EB corbos AdaptiveCore is based on the AUTOSAR Adaptive Platform specification and contains hardware-independent Adaptive Platform components and the run-time environment for adaptive applications. EB-specific enhancements that are compatible to the AUTOSAR Adaptive standard are implemented. EB corbos AdaptiveCore is the software base for safe and secure high-performance controllers.",-1),l=(0,s._)("p",null,"When building the EB ADG modules the Yocto SDK toolchain provided by the EB xelor is used.",-1),o=(0,s._)("p",null,"The open source libraries needed by the ADG are also included.",-1),t=(0,s._)("h2",{id:"building-the-adg",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#building-the-adg","aria-hidden":"true"},"#"),(0,s.Uk)(" Building the ADG")],-1),c=(0,s._)("strong",null,"Prerequisite:",-1),p=(0,s._)("br",null,null,-1),d=(0,s.Uk)(" Conan is installed on your workplace, for details see "),u=(0,s.Uk)("Docker"),b=(0,s.Uk)("In case you did not use "),h=(0,s.Uk)("Valeria"),g=(0,s.Uk)(" to build, please note that the conan profiles are using conan user and channel. You need to create a file called "),m=(0,s._)("code",null,"get_user_channel",-1),f=(0,s.Uk)(" in folder "),k=(0,s._)("code",null,"config/valeria/r-car-h3/profiles",-1),v=(0,s.Uk)(" specifying user and channel. In this example we use user "),_=(0,s._)("code",null,"EBxelor",-1),x=(0,s.Uk)(" and channel "),A=(0,s._)("code",null,"2020.12",-1),E=(0,s.Uk)("."),B=(0,s.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CONAN_USER</span><span class="token operator">=</span>EBxelor\n<span class="token assign-left variable">CONAN_CHANNEL</span><span class="token operator">=</span><span class="token number">2020.12</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Step 1 + Search all available EB corbos AdaptiveCore packages from the EB xelor artifactory</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conan search -r eb_core-releases eb_adg*\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Step 2 + Create an empty directory and install the eb_adg from the EB xelor artifactory. Replace version number and user/channel in the call in case you want to download other versions.</p><p>For R-Car H3:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> eb_adg\n<span class="token builtin class-name">cd</span> eb_adg\nconan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/host/A5x <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/host/eb_linux <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/build/soc_specific <span class="token punctuation">\\</span>\n-r eb_core-releases eb_adg/0.5.1@EBxelor/2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>For NXP S32G:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> eb_adg\n<span class="token builtin class-name">cd</span> eb_adg\nconan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/host/A53 <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/host/eb_linux <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/build/soc_specific <span class="token punctuation">\\</span>\n-r eb_core-releases eb_adg/0.5.1@EBxelor/2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="description-of-binary-files" tabindex="-1"><a class="header-anchor" href="#description-of-binary-files" aria-hidden="true">#</a> Description of binary files</h2><p>For a description of the files placed in the directories of the ADG modules please have a look into the ADG documentation.</p><h2 id="building-the-adg-1" tabindex="-1"><a class="header-anchor" href="#building-the-adg-1" aria-hidden="true">#</a> Building the ADG</h2><p>For building the ADG the ara-cli is used. The EB xelor Yocto SDK is defined as custom toolchain.</p><p>The ADG provides patch files to fix errors in the ADG modules. They are located in</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pkg/eb_adg/patch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>For building the ADG additional modules are needed in the EB linux image. Therefore some packages are added to the EB linux build and to the yocto-SDK</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pkg/eb_linux/yocto/meta-ebcore/ \\\nrecipes-images/images/core-image-eb-dev.bbappend\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="adg-containers" tabindex="-1"><a class="header-anchor" href="#adg-containers" aria-hidden="true">#</a> ADG containers</h2><p>The conan recipe <code>eb_adg_containers</code> takes the binaries from the <code>eb_adg</code> package and puts them into containers for EB corbos Linux. With the flashing library, these containers can be installed on the target to start the ADG.</p><p>The installation of the containers also installs systemd service files for the ADG daemons. They are started by default during startup. You can check if the daemons are running using <code>systemctl</code>. E.g. for the com daemon:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl status com-daemon-container\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>In case daemons are not starting, e.g. due to wrong configuration, you shall check the logs. E.g. for the com daemon:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>journalctl -u com-daemon-container\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',22),y={render:function(e,n){const a=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[i,r,l,o,t,(0,s._)("p",null,[c,p,d,(0,s.Wm)(a,{to:"/zh/eb_xelor/user_guide/docker.html"},{default:(0,s.w5)((()=>[u])),_:1})]),(0,s._)("p",null,[b,(0,s.Wm)(a,{to:"/zh/eb_xelor/user_guide/valeria.html"},{default:(0,s.w5)((()=>[h])),_:1}),g,m,f,k,v,_,x,A,E]),B],64)}}}}]);