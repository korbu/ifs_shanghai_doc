"use strict";(self.webpackChunkifs_shanghai_doc=self.webpackChunkifs_shanghai_doc||[]).push([[991],{9286:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a={key:"v-6df018e7",path:"/zh/eb_xelor/user_guide/eb_linux.html",title:"EB corbos Linux",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"获取镜像文件",slug:"获取镜像文件",children:[]},{level:2,title:"各个文件的描述",slug:"各个文件的描述",children:[]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"yocto's sstate-cache的使用",slug:"yocto-s-sstate-cache的使用",children:[]},{level:2,title:"烧写到 H3",slug:"烧写到-h3",children:[]}],filePathRelative:"zh/eb_xelor/user_guide/eb_linux.md",git:{updatedTime:1632316233e3,contributors:[{name:"Qian Chen",email:"KimChan2013@users.noreply.github.com",commits:1}]}}},7811:(e,s,n)=>{n.r(s),n.d(s,{default:()=>O});var a=n(6252);const r=(0,a._)("h1",{id:"eb-corbos-linux",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#eb-corbos-linux","aria-hidden":"true"},"#"),(0,a.Uk)(" EB corbos Linux")],-1),o=(0,a._)("p",null,"EB xelor 提供 EB corbos Linux bin文件的Conan包。",-1),l=(0,a._)("h2",{id:"获取镜像文件",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#获取镜像文件","aria-hidden":"true"},"#"),(0,a.Uk)(" 获取镜像文件")],-1),t=(0,a._)("strong",null,"前提条件:",-1),i=(0,a._)("br",null,null,-1),c=(0,a.Uk)(" 已安装Conan, 详细请参考 "),p=(0,a.Uk)("Docker"),u=(0,a.Uk)("."),d=(0,a.Uk)("如果不使用 "),b=(0,a.Uk)("Valeria"),h=(0,a.Uk)(" 来构建, 需要注意的是Conan profile使用了两个参数："),m=(0,a._)("code",null,"conan user",-1),g=(0,a.Uk)("和"),k=(0,a._)("code",null,"connan channel",-1),f=(0,a.Uk)("。 你需要在 "),_=(0,a._)("code",null,"config/valeria/r-car-h3/profiles",-1),x=(0,a.Uk)(" 目录下创建 "),v=(0,a._)("code",null,"get_user_channel",-1),y=(0,a.Uk)(" 文件并指定"),E=(0,a._)("code",null,"user",-1),w=(0,a.Uk)(" 和"),B=(0,a._)("code",null,"channel",-1),U=(0,a.Uk)("。例如："),S=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CONAN_USER=EBxelor\nCONAN_CHANNEL=2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Step 1<br> 在EB xelor artifactory中搜索所有EB corbos Linux的包.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conan search -r eb_core-releases eb_linux*\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Step 2<br> 创建空白目录并从EB xelor artifactory获取镜像文件。</p><p>For R-Car H3:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> linux\n<span class="token builtin class-name">cd</span> linux\nconan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/host/A5x <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/build/soc_specific <span class="token punctuation">\\</span>\n-r eb_core-releases eb_linux/0.3.0@EBxelor/2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>For NXP S32G:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> linux\n<span class="token builtin class-name">cd</span> linux\nconan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/host/A53 <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/s32g/profiles/build/soc_specific <span class="token punctuation">\\</span>\n-r eb_core-releases eb_linux/0.3.0@EBxelor/2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Now the linux directory contains the following binaries:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>EB_linux_base__core-image-eb-dev-corbos-*-hv.wic\nbootstrap.uimage\nImage\nsdk/corbos-linux-glibc-x86_64-core-image-eb-dev-aarch64-corbos<span class="token punctuation">\\</span>\n-*-hv-toolchain-*.sh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>yocto-sdk (corbos-linux-glibc-x86_64-core-image-eb-dev-aarch64-corbos...) 包含linux版本信息.</p></div><h2 id="各个文件的描述" tabindex="-1"><a class="header-anchor" href="#各个文件的描述" aria-hidden="true">#</a> 各个文件的描述</h2><table><thead><tr><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>EB_linux_base__core-image-eb-dev-corbos-*-hv.wic</td><td>EB corbos Linux disk image</td></tr><tr><td>bootstrap.uimage</td><td>u-boot legacy uImage with Linux kernel image. Needed for Hypervisor</td></tr><tr><td>Image</td><td>EB corbos Linux image</td></tr><tr><td>core-image-eb-dev-corbos-*-hv.squashfs</td><td>Root filesystem. Needed for Hypervisor</td></tr><tr><td>sdk/corbos-linux-glibc-x86_64-core-image-eb-dev-aarch64-corbos-*.sh</td><td>Yocto SDK generated from the build</td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p><strong>网络配置</strong></p><p>EB corbos Linux 网络配置分为两部分:</p>',16),T=(0,a.Uk)("Hostname comes from Hypervisor as kernel parameter (see more info from "),A=(0,a.Uk)("Hypervisor"),R=(0,a.Uk)(" instructions)"),C=(0,a._)("li",null,[(0,a.Uk)("IP addresses (IPv4 and IPv6) are configured in files: "),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"pkg/eb_linux/yocto/meta-ebcore/recipes-networking/ + system-network/system-network/network.json")]),(0,a._)("li",null,[(0,a.Uk)("After changing "),(0,a._)("code",null,"network*.json"),(0,a.Uk)(" files, rebuild EB corbos Linux, it generates script "),(0,a._)("code",null,"/sbin/network-config.sh"),(0,a.Uk)(" which is executed during EB corbos Linux boot")])])],-1),L=(0,a.uE)('<p>The EB xelor provides a Yocto meta layer to configure the EB linux. The meta layer is located in this directory:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pkg/eb_linux/yocto/meta-ebcore\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The purpose of the yocto layer is a clear separation of the EB xelor specific configuration from the EB products.</p><h2 id="yocto-s-sstate-cache的使用" tabindex="-1"><a class="header-anchor" href="#yocto-s-sstate-cache的使用" aria-hidden="true">#</a> yocto&#39;s sstate-cache的使用</h2>',4),I=(0,a.Uk)("The usage of yocto's sstate-cache can speed up the build process significantly after an initial build. Read the "),F={href:"https://wiki.yoctoproject.org/wiki/Enable_sstate_cache",target:"_blank",rel:"noopener noreferrer"},H=(0,a.Uk)("yocto manual"),N=(0,a.Uk)(" for more information about the sstate-cache."),D=(0,a.uE)('<p>The Linux recipe <code>pkg/eb_linux/conan/conanfile.py</code> configures the cache based on the following environment variables.</p><p>eb_linux recipe 中 sstate-cache configuration使用的环境变量</p><table><thead><tr><th>环境变量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>SSTATE_DIR</code></td><td><code>/my-local-cache/sstate-cache</code></td><td>The directory of the local sstate-cache</td></tr><tr><td><code>SSTATE_MIRRORS</code></td><td><code>file://.* http://sstate-cache.my.domain/PATH</code></td><td>Address of the remote sstate-cache server</td></tr></tbody></table><p>A typical setup is:</p><ul><li>After a clean build, the <code>SSTATE_DIR</code> directory contains the sstate files.</li><li>These files are uploaded to the <code>SSTATE_MIRRORS</code> server to share those with other build machines.</li><li>Also in subsequent builds, newly generated files in <code>SSTATE_DIR</code> are uploaded to the server.</li></ul><h2 id="烧写到-h3" tabindex="-1"><a class="header-anchor" href="#烧写到-h3" aria-hidden="true">#</a> 烧写到 H3</h2>',6),z=(0,a.Uk)("Flashing to the target can be done manually or with the flashing library. The steps are described in "),q=(0,a.Uk)("烧写"),P=(0,a.Uk)(" chapters."),W=(0,a.uE)('<p>Write card image to SD card with dd (replace &quot;sdX&quot; with your SD card device, e.g. &quot;sdc&quot;)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>EB_linux_base__core-image-eb-dev-corbos-h3ulcb-hv.wic <span class="token punctuation">\\</span>\n  <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdX <span class="token assign-left variable">bs</span><span class="token operator">=</span>64M\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Insert SD card to target, reboot target, interrupt the u-boot and boot the hypervisor image:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">=</span><span class="token operator">&gt;</span> ext2load mmc <span class="token number">0</span>:1 0x50FFFFC0 bootstrap.uimage\n<span class="token number">40633584</span> bytes <span class="token builtin class-name">read</span> <span class="token keyword">in</span> <span class="token number">931</span> ms <span class="token punctuation">(</span><span class="token number">41.6</span> MiB/s<span class="token punctuation">)</span>\n<span class="token operator">=</span><span class="token operator">&gt;</span> bootm 0x50FFFFC0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),O={render:function(e,s){const n=(0,a.up)("RouterLink"),O=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,o,l,(0,a._)("p",null,[t,i,c,(0,a.Wm)(n,{to:"/zh/eb_xelor/user_guide/docker.html"},{default:(0,a.w5)((()=>[p])),_:1}),u]),(0,a._)("p",null,[d,(0,a.Wm)(n,{to:"/zh/eb_xelor/user_guide/valeria.html"},{default:(0,a.w5)((()=>[b])),_:1}),h,m,g,k,f,_,x,v,y,E,w,B,U]),S,(0,a._)("ul",null,[(0,a._)("li",null,[T,(0,a.Wm)(n,{to:"/zh/eb_xelor/user_guide/hypervisor.html"},{default:(0,a.w5)((()=>[A])),_:1}),R]),C]),L,(0,a._)("p",null,[I,(0,a._)("a",F,[H,(0,a.Wm)(O)]),N]),D,(0,a._)("p",null,[z,(0,a.Wm)(n,{to:"/zh/eb_xelor/user_guide/flashing.html"},{default:(0,a.w5)((()=>[q])),_:1}),P]),W],64)}}}}]);