"use strict";(self.webpackChunkifs_shanghai_doc=self.webpackChunkifs_shanghai_doc||[]).push([[101],{3454:(e,a,r)=>{r.r(a),r.d(a,{data:()=>n});const n={key:"v-ac7d40c4",path:"/zh/eb_xelor/user_guide/firmware.html",title:"Firmware for R-Car H3",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"获取bin文件",slug:"获取bin文件",children:[]},{level:2,title:"各个文件的描述",slug:"各个文件的描述",children:[]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"Flashing to H3",slug:"flashing-to-h3",children:[]}],filePathRelative:"zh/eb_xelor/user_guide/firmware.md",git:{updatedTime:1633094711e3,contributors:[{name:"Qian Chen",email:"827391449@qq.com",commits:1}]}}},558:(e,a,r)=>{r.r(a),r.d(a,{default:()=>U});var n=r(6252);const t=(0,n._)("h1",{id:"firmware-for-r-car-h3",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#firmware-for-r-car-h3","aria-hidden":"true"},"#"),(0,n.Uk)(" Firmware for R-Car H3")],-1),s=(0,n._)("p",null,"EB xelor 提供 R-Car H3 firmware bin文件的Conan包。",-1),l=(0,n._)("h2",{id:"获取bin文件",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#获取bin文件","aria-hidden":"true"},"#"),(0,n.Uk)(" 获取bin文件")],-1),i=(0,n._)("strong",null,"前提条件:",-1),o=(0,n._)("br",null,null,-1),d=(0,n.Uk)(" 已安装Conan, 详细请参考 "),c=(0,n.Uk)("Docker"),p=(0,n.Uk)("."),u=(0,n.Uk)("如果不用 "),h=(0,n.Uk)("Valeria"),b=(0,n.Uk)(" 来构建, 需要注意的是Conan profile使用conan user和connan channel。 你需要在 "),m=(0,n._)("code",null,"config/valeria/r-car-h3/profiles",-1),f=(0,n.Uk)(" 目录下创建 "),_=(0,n._)("code",null,"get_user_channel",-1),g=(0,n.Uk)(" 文件并指定user 和 channel。 例如："),k=(0,n.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>CONAN_USER=EBxelor\nCONAN_CHANNEL=2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Step 1<br> 在EB xelor artifactory中搜索所有firmware的包. E.g. firmware:</p><p><code>conan search -r eb_core-releases \\*eb_firmware*</code></p><p>Step 2<br> 创建空白目录并从EB xelor artifactory获取二进制文件。例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> firmware\n<span class="token builtin class-name">cd</span> firmware\nconan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/host/gcc7_arm64 <span class="token punctuation">\\</span>\n--profile:host<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/host/A5x <span class="token punctuation">\\</span>\n--profile:build<span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/EBxelor-2020.12/config/valeria/r-car-h3/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n-r eb_core-releases eb_firmware/0.1.1@EBxelor/2020.12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>当前firmware包包含R7和A5x的文件。后续版本会将他们分开打包。</p></div><p>Step 3<br> 检查目录下已有对应的文件：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>firmware-H3-4GB\nfirmware-H3-8GB\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="各个文件的描述" tabindex="-1"><a class="header-anchor" href="#各个文件的描述" aria-hidden="true">#</a> 各个文件的描述</h2><table><thead><tr><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>bl2.elf</td><td>Perform platform security setup to allow access to controlled components, started vom IPL1</td></tr><tr><td>bl2.map</td><td>bl2 map file</td></tr><tr><td>bl2.srec</td><td>bl2 in srec format</td></tr><tr><td>bl31.elf</td><td>Started by the bl2, initializes power modes</td></tr><tr><td>bl31.map</td><td>bl31 map file</td></tr><tr><td>bl31.srec</td><td>bl31 in srec format</td></tr><tr><td>bootparam_sa0.srec</td><td>???</td></tr><tr><td>cert_header_sa6.srec</td><td>certificate header of the IPL1, checked by the boot ROM</td></tr><tr><td>ipl1.elf</td><td>first part that is started</td></tr><tr><td>ipl1.map</td><td>ipl1 map file</td></tr><tr><td>ipl1.srec</td><td>ipl1 in srec format</td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>firmware文档中有使用到的地址的描述。 firmware以二进制文件形式交付。</p><h2 id="flashing-to-h3" tabindex="-1"><a class="header-anchor" href="#flashing-to-h3" aria-hidden="true">#</a> Flashing to H3</h2>',13),x=(0,n.Uk)("参考 "),w=(0,n.Uk)("Flashing"),v=(0,n.Uk)(" 已了解如何烧写。"),U={render:function(e,a){const r=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[t,s,l,(0,n._)("p",null,[i,o,d,(0,n.Wm)(r,{to:"/zh/eb_xelor/user_guide/docker.html"},{default:(0,n.w5)((()=>[c])),_:1}),p]),(0,n._)("p",null,[u,(0,n.Wm)(r,{to:"/zh/eb_xelor/user_guide/valeria.html"},{default:(0,n.w5)((()=>[h])),_:1}),b,m,f,_,g]),k,(0,n._)("p",null,[x,(0,n.Wm)(r,{to:"/zh/eb_xelor/user_guide/flashing.html"},{default:(0,n.w5)((()=>[w])),_:1}),v])],64)}}}}]);