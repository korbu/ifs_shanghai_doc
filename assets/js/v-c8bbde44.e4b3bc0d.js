"use strict";(self.webpackChunkifs_shanghai_doc=self.webpackChunkifs_shanghai_doc||[]).push([[50],{9588:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-c8bbde44",path:"/zh/eb_xelor/user_guide/development.html",title:"开发工作流",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Step 1: call valeria",slug:"step-1-call-valeria",children:[]},{level:2,title:"Step 2: 使用Conan工作流",slug:"step-2-使用conan工作流",children:[]}],filePathRelative:"zh/eb_xelor/user_guide/development.md",git:{updatedTime:1632316233e3,contributors:[{name:"Qian Chen",email:"KimChan2013@users.noreply.github.com",commits:1}]}}},4932:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});const e=(0,s(6252).uE)('<h1 id="开发工作流" tabindex="-1"><a class="header-anchor" href="#开发工作流" aria-hidden="true">#</a> 开发工作流</h1><p>本节将介绍如何利用EB xelor开发包。</p><h2 id="step-1-call-valeria" tabindex="-1"><a class="header-anchor" href="#step-1-call-valeria" aria-hidden="true">#</a> Step 1: call valeria</h2><p>首先你需要将所有包的信息取到本地conan缓存，保证所有需要的依赖都在你的本地。 如果你设置好了conan remote仓库，用户，和channel，所有未修改的包都会从Artifactory获得，而不需要重新构建。</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>使用stable channel时，注意不要随意上传文件。 开发时，建议使用你自己的用户和channel。</p></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>EB xelor团队使用特定的仓库用来开发。 EB xelor持续集成系统使用 <code>EBcore/merge-EBCORE-1234</code> 来做合并验证, <code>EBCORE-1234</code> 是git仓库的一个分支名。 本地使用同样的配置时，本地开发和持续集成系统会关联起来，方便重用包而不用重新构建。</p></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>为了减少Valeria运行时间，你可以：</p><ul><li>如果开发只涉及部分EB xelor代码，创建一个精简版Valeria build manifest</li><li>利用 <code>--build-policy</code> 指定你开发的包，pattern可参考</li></ul></div><h2 id="step-2-使用conan工作流" tabindex="-1"><a class="header-anchor" href="#step-2-使用conan工作流" aria-hidden="true">#</a> Step 2: 使用Conan工作流</h2><p>运行完Valeria命令后，使用 https://docs.conan.io/en/latest/developing_packages/package_dev_flow.html[conan package 开发工作流].</p><p>作为例子，我们为R-Car H3改动位于 <code>pkg/eb_u-boot/conan</code> 的 <code>u-boot</code> 包。</p><p>调用conan指令时，你需要指定相应的profile配置。 你可以通过build manifest或者valeria输出来决定这些设置：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>valeria<span class="token punctuation">]</span> invoke: conan lock create \n--reference eb_u-boot/0.1.0@your_user/valeria-test \n--lockfile valeria-buildspec-1-init.lock \n--lockfile-out valeria-buildspec-1-full.lock\n--profile:host \n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/host/A5x\n--profile:host \n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/host/\ngcc7_arm64\n--profile:build \n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/build/linux_x86_64\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>进入 <code>pkg/eb_u-boot/conan</code> 目录，然后执行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conan <span class="token function">install</span> <span class="token punctuation">\\</span>\n--profile:host <span class="token punctuation">\\</span>\n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/host/A5x <span class="token punctuation">\\</span>\n--profile:host <span class="token punctuation">\\</span>\n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/host/<span class="token punctuation">\\</span>\ngcc7_arm64 <span class="token punctuation">\\</span>\n--profile:build <span class="token punctuation">\\</span>\n/workdir/EBcore-main/config/valeria/r-car-h3/profiles/build/linux_x86_64 <span class="token punctuation">\\</span>\n--install-folder build <span class="token builtin class-name">.</span> your-user/valeria-test\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>执行之后，所有构建相关的设定会在build文件夹中，然后你可以执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conan <span class="token builtin class-name">source</span> --source-folder build --install-folder build <span class="token builtin class-name">.</span>\nconan build --build-folder build <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>来构建u-boot包。</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>后续开发中，建议先用构建系统构建一次集成好的包，然后做增量（开发）构建。例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> build/u-boot-2018.09-rcar-3.9.5\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span><span class="token punctuation">\\</span>\n/workdir/.conan/data/gcc7-arm64/0.1.0/your-user/<span class="token punctuation">\\</span>\nvaleria-test/package/<span class="token punctuation">\\</span>\n4db1be536558d833e52e862fd84d64d75c2b3656/<span class="token punctuation">\\</span>\ngcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/<span class="token punctuation">\\</span>\naarch64-linux-gnu-\n<span class="token function">make</span> -j <span class="token number">4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>开发完成后，再次调用conan。</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>基于EB xelor模板创建一个新的recipe文件 (conanfile.py):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conan new --template pkg mypackage/1.2.3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后遵从step 2中的conan包开发工作流来开发你自己的包。</p></div>',19),l={render:function(n,a){return e}}}}]);