"use strict";(self.webpackChunkifs_shanghai_doc=self.webpackChunkifs_shanghai_doc||[]).push([[581],{437:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-ddb2d380",path:"/zh/eb_corbos_starterkit/create_project.html",title:"从头创建一个新工程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建一个新的工程",slug:"创建一个新的工程",children:[]},{level:2,title:"导入新建的项目",slug:"导入新建的项目",children:[]},{level:2,title:"修改CMakeList",slug:"修改cmakelist",children:[]},{level:2,title:"修改project_config.json",slug:"修改project-config-json",children:[{level:3,title:"修改deploy-files一栏的内容",slug:"修改deploy-files一栏的内容",children:[]},{level:3,title:"修改target-host为我们想要depoly的qemu地址",slug:"修改target-host为我们想要depoly的qemu地址",children:[]}]},{level:2,title:"Model文件夹内容",slug:"model文件夹内容",children:[]},{level:2,title:"在impl下面实现自己的代码",slug:"在impl下面实现自己的代码",children:[]},{level:2,title:"根据model生成配置文件",slug:"根据model生成配置文件",children:[]},{level:2,title:"启动qemu1&qemu2",slug:"启动qemu1-qemu2",children:[]},{level:2,title:"编译生成container，部署到qemu里",slug:"编译生成container-部署到qemu里",children:[]},{level:2,title:"执行程序",slug:"执行程序",children:[]},{level:2,title:"停止qemu",slug:"停止qemu",children:[]}],filePathRelative:"zh/eb_corbos_starterkit/create_project.md",git:{updatedTime:1638891325e3,contributors:[{name:"Kim Chan",email:"KimChan2013@users.noreply.github.com",commits:2},{name:"Qian Chen",email:"KimChan2013@users.noreply.github.com",commits:1}]}}},5763:(e,a,n)=>{n.r(a),n.d(a,{default:()=>pe});var s=n(6252);const l=(0,s.uE)('<h1 id="从头创建一个新工程" tabindex="-1"><a class="header-anchor" href="#从头创建一个新工程" aria-hidden="true">#</a> 从头创建一个新工程</h1><p>以添加一个加法服务为例，服务端提供两个int入参，并返回int值的接口<code>add2nums</code>。 最终实现两数相加，在VM1和VM2进行someip通信。</p><h2 id="创建一个新的工程" tabindex="-1"><a class="header-anchor" href="#创建一个新的工程" aria-hidden="true">#</a> 创建一个新的工程</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ara-cli Application --create-project --app ~/ara/eb/workspace/adg/demo/AddService --target-os eblinux\nara-cli Application --create-project --app ~/ara/eb/workspace/adg/demo/AddClient --target-os eblinux\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="导入新建的项目" tabindex="-1"><a class="header-anchor" href="#导入新建的项目" aria-hidden="true">#</a> 导入新建的项目</h2>',5),r=["src"],t=(0,s.Uk)("注意：如果新导入项目没有Build Targets，需要关闭项目重新打开."),i=(0,s._)("br",null,null,-1),c=(0,s.Uk)(" 右击AddService→Close Project"),o=(0,s._)("br",null,null,-1),p=["src"],u=(0,s.uE)('<h2 id="修改cmakelist" tabindex="-1"><a class="header-anchor" href="#修改cmakelist" aria-hidden="true">#</a> 修改CMakeList</h2><p>定义变量：</p><div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token comment"># This must be explicitly set when the project installs files for just 1 component (not devel)</span>\nset<span class="token punctuation">(</span>CPACK_COMPONENTS_ALL runtime<span class="token punctuation">)</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),d=["src"],m=(0,s.uE)('<h2 id="修改project-config-json" tabindex="-1"><a class="header-anchor" href="#修改project-config-json" aria-hidden="true">#</a> 修改project_config.json</h2><h3 id="修改deploy-files一栏的内容" tabindex="-1"><a class="header-anchor" href="#修改deploy-files一栏的内容" aria-hidden="true">#</a> 修改deploy-files一栏的内容</h3><p>需要将<code>&lt;project name&gt;</code>替换为你自己项目的名称。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;deploy-files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token property">&quot;deploy-files-list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;generated/config/&lt;project name&gt;_someip_machine1.json&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;deploy-files-dest&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/data/target/etc/adaptive/ara_Com/daemon_1&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;skip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;False&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>json文件最终会deploy到qemu里的<code>/data/target/etc/adaptive/ara_Com/daemon_1</code>目录</p><h3 id="修改target-host为我们想要depoly的qemu地址" tabindex="-1"><a class="header-anchor" href="#修改target-host为我们想要depoly的qemu地址" aria-hidden="true">#</a> 修改target-host为我们想要depoly的qemu地址</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;target-host&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">&quot;ip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fd00::eb:2&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>&quot;target-host&quot; 里添加想deploy的目标ip, 现在qemu1是<code>fd00::eb:1</code>, qemu2是<code>fd00::eb:2</code>。</p><h2 id="model文件夹内容" tabindex="-1"><a class="header-anchor" href="#model文件夹内容" aria-hidden="true">#</a> Model文件夹内容</h2>',9),b=(0,s._)("li",null,"拷贝Sensor_handel model文件夹下的：system.arxml和machine.arxml（原来的arxml需要先备份一下，之后会用到）到我们的项目里。这两个arxml是跟随环境定制的",-1),h=(0,s.Uk)("修改ExecutionManager.ecuconfig: (调用dlt的接口时需要用到share memory) "),g=["src"],_=(0,s._)("li",null,"因为service.arxml里面用到了一些基本类型，从Senson_handler model里拷贝impltypes.arxml到我们项目中。",-1),v=(0,s._)("li",null,"写我们的定义的服务接口add2nums：service.arxml，和deployment_udp.arxml。可以参照之前demo写。",-1),k={class:"custom-container tip"},f=(0,s._)("p",{class:"custom-container-title"},"注意",-1),q=(0,s.Uk)("一个服务里可以同时有method, event, field接口。"),x=(0,s._)("br",null,null,-1),j=(0,s.Uk)(" 如果觉得需要划分功能，可以用多个功能相应的service.arxml和deployment_udp.arxml。"),y=(0,s._)("br",null,null,-1),C=(0,s.Uk)(" 下图为接口入参配置。"),w=(0,s._)("br",null,null,-1),S=["src"],U=(0,s.Uk)(" AddService_Interface为我们定义的一个Interface。"),M=(0,s.Uk)("下图为返回值配置："),A=(0,s._)("br",null,null,-1),B=["src"],E=(0,s.Uk)("Interfaceid 和instanceid和methodid在Deployment_udp.arxml中定义。"),$=(0,s._)("br",null,null,-1),Q=["src"],D=(0,s.Uk)("ServiceInterface指向的是service.arxml中定义的Interface。"),I=(0,s._)("br",null,null,-1),T=["src"],L=(0,s.Uk)("SdServerConfig指向的Config中定义了我们服务的一些属性。"),O=(0,s._)("br",null,null,-1),K=["src"],N=(0,s._)("p",null,"add2nums要指向到我们定义的函数接口。",-1),P=(0,s.Uk)("如果不知道某项配置的指向可以点击倒三角然后跳转到定义处。"),z=(0,s._)("br",null,null,-1),F=["src"],G=(0,s.uE)('<h2 id="在impl下面实现自己的代码" tabindex="-1"><a class="header-anchor" href="#在impl下面实现自己的代码" aria-hidden="true">#</a> 在impl下面实现自己的代码</h2><p>参考我们demo的实现代码。 Service端主要接口：OfferService，StopOfferService<br> Client端主要接口：FindService</p><h2 id="根据model生成配置文件" tabindex="-1"><a class="header-anchor" href="#根据model生成配置文件" aria-hidden="true">#</a> 根据model生成配置文件</h2><p>点击pluget里的插件 <code>AraComBindingGenerator.pluget</code> 生成SOA需要的源文件和头文件在项目 <code>generated</code> 文件夹里。<br> 点击pluget里的插件 <code>AraComManifestGenerator.pluget</code> 根据 <code>deployment_udp.arxml</code> 生成 配置文件 <code>**_someip_machine1.json</code> 在generated，用于VM之间通信。<br> 点击pluget 里的插件 <code>araEmManifestGen.pluget</code> 生成em所需要的一些配置文件，在做这一步时，<code>machine.arxml</code> 需要替换为之前备份的machine.arxml。</p><h2 id="启动qemu1-qemu2" tabindex="-1"><a class="header-anchor" href="#启动qemu1-qemu2" aria-hidden="true">#</a> 启动qemu1&amp;qemu2</h2><p>数字1代表qemu1.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ara-network -a -N <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',7),R=["src"],V=(0,s.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ara-cli RunQemu --start <span class="token number">1</span> --target-os eblinux\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),H=["src"],Y=(0,s.uE)('<h2 id="编译生成container-部署到qemu里" tabindex="-1"><a class="header-anchor" href="#编译生成container-部署到qemu里" aria-hidden="true">#</a> 编译生成container，部署到qemu里</h2><p>逐步点击Build Targets里的 Build ，CreateAppContainer，DeployAppContainer，DeployTargetFiles。</p><h2 id="执行程序" tabindex="-1"><a class="header-anchor" href="#执行程序" aria-hidden="true">#</a> 执行程序</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>runc list \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),J=(0,s.Uk)("查看已经运行container"),W=(0,s._)("br",null,null,-1),X=(0,s.Uk)(" QEMU1:"),Z=(0,s._)("br",null,null,-1),ee=["src"],ae=(0,s._)("br",null,null,-1),ne=(0,s.Uk)(" QEMU2:"),se=(0,s._)("br",null,null,-1),le=["src"],re=(0,s.uE)('<p>重启com_daemon使其添加我们的someip配置文件(两个qemu都要做)。<br> Qemu里执行：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>systemctl restart com-daemon-container  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Qemu里执行：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ps ww | grep com_daemon  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到qemu里com_daemon的启动参数里添加上了我们的配置文件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>/usr/bin/com_daemon -d -i fd00::eb:f5 fe80::8cd9:b4ff:fe7c:4548 -n eth0 -m /etc/adaptive/ara_Com/daemon_1/addclient_someip_machine1.json -c <span class="token number">255</span> -e /var/run/adaptive/ara_Com/ara_com_sm -g /var/run/adaptive/ara_Com/ara_com_gw_1_ --add_config /required_service_instances/*/maximum_number_of_instances<span class="token operator">=</span><span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>运行：<br> Qemu1运行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>runc <span class="token builtin class-name">exec</span> -t AddService /opt/AddService/bin/AddService  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Qemu2运行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>runc <span class="token builtin class-name">exec</span> -t AddClient /opt/AddClient/bin/AddClient  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',10),te=(0,s.Uk)("下图可以看出qemu1的service和qemu2的client建立了连接，并且调用函数成功。"),ie=(0,s._)("br",null,null,-1),ce=["src"],oe=(0,s.uE)('<h2 id="停止qemu" tabindex="-1"><a class="header-anchor" href="#停止qemu" aria-hidden="true">#</a> 停止qemu</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ara-cli RunQemu --stop <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),pe={render:function(e,a){return(0,s.wg)(),(0,s.iD)(s.HY,null,[l,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/import_new_project.png"),alt:"导入新创建的项目"},null,8,r),(0,s._)("p",null,[t,i,c,o,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/close_project.png"),alt:"关闭项目"},null,8,p)]),u,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/modify_CMakelist.png"),alt:"修改CMakeList"},null,8,d),m,(0,s._)("ul",null,[b,(0,s._)("li",null,[h,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/ExecutionManager_ecuconfig.png"),alt:"EM配置"},null,8,g)]),_,v]),(0,s._)("div",k,[f,(0,s._)("p",null,[q,x,j,y,C,w,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/interface_parameter_configuration.png"),alt:"接口参数配置"},null,8,S),U])]),(0,s._)("p",null,[M,A,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/return_value_configuration.png"),alt:"返回值信息"},null,8,B)]),(0,s._)("p",null,[E,$,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/Deployment_udp.png"),alt:"部署信息"},null,8,Q)]),(0,s._)("p",null,[D,I,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/ServiceInterface.png"),alt:"Service接口"},null,8,T)]),(0,s._)("p",null,[L,O,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/SdServerConfig.png"),alt:"SD Server端配置"},null,8,K)]),N,(0,s._)("p",null,[P,z,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/other_configuration.png"),alt:"其他配置"},null,8,F)]),G,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/demo_ara_com/network_bridge.png"),alt:"网络设置"},null,8,R),V,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/demo_ara_com/run_qemu.png"),alt:"启动QEMU"},null,8,H),Y,(0,s._)("p",null,[J,W,X,Z,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/new_runc_list_qemu1.png"),alt:"QEMU1"},null,8,ee),ae,ne,se,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/new_runc_list_qemu2.png"),alt:"QEMU2"},null,8,le)]),re,(0,s._)("p",null,[te,ie,(0,s._)("img",{src:e.$withBase("/images/eb_corbos_starterkit/create_project/new_log.png"),alt:"成功通信"},null,8,ce)]),oe],64)}}}}]);